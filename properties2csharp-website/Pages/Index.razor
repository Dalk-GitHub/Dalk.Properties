@page "/"
@page "/{*RouteStr}"
@inject IJSRuntime js

<textarea class="ta fx l" @bind="input">
</textarea>
<textarea class="ta fx r" @bind="result" readonly>
</textarea>
<div class="fx st">
    <p class="dt">Name</p>
    <input type="text" @bind="name" />
    <br />
    <p class="dt">Generated namespace</p>
    <input type="text" @bind="namespaces" />
    <br />
    <p class="dt">Type for integers</p>
    <input type="text" @bind="intType" />
    <br />
    <p class="dt">Type for point numbers</p>
    <input type="text" @bind="pnType" />
    <br />
    <br />
    <button @onclick="CopyCode">Copy Code</button>
    <br />
</div>
<div class="na">
    properties2csharp
</div>

@code {
    [Parameter]
    public string RouteStr { get; set; }
    string result = "";
    string nameS = "Welcome";
    string inputS = "";
    int timeout = 5;

    Configuration conf = ClassGenerator.DefaultConfiguration;
    string name
    {
        get
        {
            return nameS;
        }
        set
        {
            nameS = value;
            OnChangeUpdate();
        }
    }
    string namespaces
    {
        get
        {
            return conf.Namespace;
        }
        set
        {
            if(!string.IsNullOrEmpty(value))
                conf.Namespace = value;
            else
                conf.Namespace = "Properties2CSharp";
            OnChangeUpdate();
        }
    }
    string pnType
    {
        get
        {
            return conf.PointNumberType;
        }
        set
        {
            conf.PointNumberType = value;
            OnChangeUpdate();
        }
    }
    string intType
    {
        get
        {
            return conf.NumberType;
        }
        set
        {
            conf.NumberType = value;
            OnChangeUpdate();
        }
    }
    string input
    {
        get
        {
            return inputS;
        }
        set
        {
            inputS = value;
            OnChangeUpdate();
        }
    }
    protected override void OnInitialized()
    {
        OnChangeUpdate();
        base.OnInitialized();
    }
    void OnChangeUpdate()
    {
        result = ClassGenerator.Generate(input, name,conf);
    }
    void CopyCode()
    {
        js.InvokeVoidAsync("navigator.clipboard.writeText", result);
    }
}